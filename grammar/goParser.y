%{
#include <stdio.h>
#include <stdlib.h>
#include<iostream>


extern char *yytext;
extern int yylineno;
extern FILE* yyin;
extern std::string str;
extern int yylex();
void yyerror(char const *s) {fprintf(stderr, "Error: (line %d) %s\n", yylineno, s); }
%}
%token tBREAK tCASE tCHAN tCONST tCONTINUE tDEFAULT tDEFER tELSE tFALLTHROUGH tFOR tFUNC tGO tGOTO tIF tIMPORT tINTERFACE tMAP tPACKAGE tRANGE tRETURN tSELECT tSTRUCT tSWITCH tTYPE tVAR
%token tINT tFLOAT tBOOL tRUNE tSTRING tPRINT tPRINTLN tAPPEND
%token tINTCONST tFLOATCONST tSTRINGCONST tRUNECONST tIDENTIFIER tRAWSTRINGCONST

%token tUNOP tRELOP tADDOP tMULOP  
%token '+' '-' '*' '/' '%'
%token '&' '|' '^' tSHL tSHR tANDNOT
%token tADDASSIGN tSUBASSIGN tMULASSIGN tDIVASSIGN tREMASSIGN
%token tANDASSIGN tORASSIGN tXORASSIGN tSHLASSIGN tSHRASSIGN tANDNOTASSIGN
%token tLAND tLOR tARROW tINC tDEC
%token tEQUALS '<' '>' '=' tBANG
%token tNEQ tLEQ tGEQ tDEFINE tELLIPSIS
%token '(' ')' '[' ']' '{' '}' ';' ':' ',' '.'
%left tLOR
%left tLAND
%left tRELOP tEQUALS tNEQ '<' '>' tLEQ tGEQ
%left tADDOP '+' '-' '|' '^'
%left tMULOP '*' '/' '%' tSHL tSHR '&' tANDNOT
%left tUNOP

%error-verbose
%locations
%%
PROGRAM: PACKAGECLAUSE ';' TOPLEVELDECLLIST ;
PACKAGECLAUSE: tPACKAGE tIDENTIFIER
TOPLEVELDECLLIST : | TOPLEVELDECLLIST TOPLEVELDECL ;
TOPLEVELDECL: DECL|FUNCDECL;
DECL: VARDECL|TYPEDECL;
FUNCDECL: tFUNC FUNCNAME FUNCTION | tFUNC FUNCNAME SIGN
FUNCNAME : tIDENTIFIER
FUNCTION : SIGN FUNCBODY
FUNCBODY: BLOCK
BLOCK:  BLOCKWOSEMI ';'
BLOCKWOSEMI:'{' STMTLIST '}' 
SIGN : PARAMS | PARAMS RESULT
RESULT : TYPE
PARAMS: '(' PARAMLIST ')' | '(' ')' 
PARAMLIST : PARAMLIST ',' PARAM  | PARAM
PARAM:  IDENTIFIERLIST TYPE  
VARDECL : tVAR VARSPEC ';'
			| tVAR '(' VARSPECLIST ')' ';';
TYPEDECL: tTYPE TYPESPEC ';' | tTYPE '(' TYPESPECLIST ')' ';'
TYPESPECLIST:  TYPESPECLIST TYPESPEC ';'|;
TYPESPEC: tIDENTIFIER TYPE;
VARSPECLIST:  |VARSPECLIST VARSPEC ';'
VARSPEC : IDENTIFIERLIST TYPE '=' EXPRLIST |  
		  IDENTIFIERLIST '=' EXPRLIST |
			IDENTIFIERLIST TYPE ;
IDENTIFIERLIST: tIDENTIFIER| IDENTIFIERLIST ',' tIDENTIFIER;
TYPE: BASICTYPE | '[' ']' TYPE | '[' tINTCONST ']' TYPE|tSTRUCT '{' FIELDDECLLIST '}' | tIDENTIFIER; 
BASICTYPE: tINT| tRUNE|tFLOAT| tBOOL | tSTRING;
FIELDDECLLIST: FIELDDECLLIST FIELDDECL ';' |
FIELDDECL: IDENTIFIERLIST TYPE
/* Statements*/
STMTLIST:/*empty*/ |STMTLIST STMT
STMT : 	 DECL
	 | BLOCK
	 | PRINTSTMT
	 | PRINTLNSTMT
	 |RETSTMT 
	 | IFSTMT
	 |SIMPLESTMT 
	 | SWITCHSTMT
	 | FORSTMT
	 | BREAKSTMT
	 | CONTSTMT
SIMPLESTMT : SIMPLESTMTWOSEMI ';'
SIMPLESTMTWOSEMI:
			| EXPRSTMT 
			| INCSTMT 
			| DECSTMT 
			| ASSIGNSTMT 
			| SHORTVARDECL	
ASSIGNSTMT: EXPRLIST ASSIGNOP EXPRLIST 
SHORTVARDECL: EXPRLIST tDEFINE EXPRLIST 
INCSTMT : EXPR tINC 
DECSTMT : EXPR tDEC 
PRINTSTMT : tPRINT '(' EXPRLIST ')' ';' | tPRINT '(' ')' ';' 
PRINTLNSTMT : tPRINTLN '(' EXPRLIST ')' ';' | tPRINTLN '(' ')' ';' 
RETSTMT : tRETURN EXPR ';' | tRETURN ';'
IFSTMT : tIF IFCOND BLOCK | tIF IFCOND BLOCKWOSEMI tELSE  ELSEBLOCK
SWITCHSTMT : tSWITCH SWITCHCOND '{' CASECLAUSELIST '}'
FORSTMT : tFOR FORCLAUSE BLOCK 
FORCLAUSE :  CONDITION | FORSTMTCLAUSE
CONDITION : | EXPR 
FORSTMTCLAUSE : SIMPLESTMTWOSEMI ';' CONDITION ';' SIMPLESTMTWOSEMI
SWITCHCOND : SIMPLESTMT | SIMPLESTMT EXPR | EXPR | 
CASECLAUSELIST : | CASECLAUSELIST CASECLAUSE
CASECLAUSE : SWITCHCASE ':' STMTLIST
SWITCHCASE : tCASE EXPRLIST | tDEFAULT 
IFCOND : SIMPLESTMT EXPR | EXPR
ELSEBLOCK : BLOCK | IFSTMT 
BREAKSTMT : tBREAK ';'
CONTSTMT : tCONTINUE ';'
ASSIGNOP: '=' |tADDASSIGN | tSUBASSIGN | tMULASSIGN | tDIVASSIGN | tREMASSIGN | tANDASSIGN | tORASSIGN  | tXORASSIGN | tSHLASSIGN | tSHRASSIGN | tANDNOTASSIGN; 
EXPRSTMT: EXPR
 /* Expressions */ 
EXPRLIST : EXPR | EXPRLIST ',' EXPR 
OPERAND: '(' EXPR ')' |
		OPERANDNAME|
		LITERAL;
OPERANDNAME: tIDENTIFIER
LITERAL: tFLOATCONST | tRUNECONST | tINTCONST | tSTRINGCONST | tRAWSTRINGCONST;
EXPR: PRIMARYEXPR |
	  EXPR '*' EXPR |
	  EXPR '/' EXPR |
	  EXPR '%' EXPR |
	  EXPR '&' EXPR |
	  EXPR tANDNOT EXPR |
	  EXPR tSHL EXPR |
	  EXPR tSHR EXPR |  
	  EXPR '|' EXPR |
	  EXPR '^' EXPR |
	  EXPR '-' EXPR | 
	  EXPR '+' EXPR | 
	  EXPR tEQUALS EXPR |
	  EXPR tLEQ EXPR |
	  EXPR '<'  EXPR |
	  EXPR tGEQ EXPR |
	  EXPR '>' EXPR |
	  EXPR tNEQ EXPR |  
	  EXPR tLAND EXPR |
	  EXPR tLOR EXPR |
	  APPENDEXPR |
	  UNOP EXPR %prec tUNOP 
UNOP : '+' | '-' | tBANG | '^'
FUNCALLEXPR: PRIMARYEXPR '(' EXPRLIST ')' | PRIMARYEXPR '(' ')'
APPENDEXPR: tAPPEND '(' tIDENTIFIER ',' EXPRLIST ')'
PRIMARYEXPR : OPERAND |
	  		 FUNCALLEXPR 
			 |CONVERSION
			 | PRIMARYEXPR SELECTOR 
			 |PRIMARYEXPR INDEX
			 |PRIMARYEXPR SLICE
SELECTOR : '.' tIDENTIFIER
CONVERSION : BASICTYPE '(' EXPR ')'
INDEX : '[' EXPR ']'
SLICE : '[' EXPR ':' EXPR ']'
		| '[' ':' EXPR ']'
		| '[' EXPR ':' ']'
		| '[' ':' ']'
		| '[' EXPR ':' EXPR ':' EXPR ']'
		| '[' ':' EXPR ':' EXPR ']'  
%%

